// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RollerPizza.Data;

#nullable disable

namespace RollerPizza.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220712132301_teste")]
    partial class teste
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DrinkPayment", b =>
                {
                    b.Property<int>("DrinksId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentId")
                        .HasColumnType("varchar(11)");

                    b.HasKey("DrinksId", "PaymentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("DrinkPayment");
                });

            modelBuilder.Entity("PaymentPizza", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("varchar(11)");

                    b.Property<int>("PizzasId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId", "PizzasId");

                    b.HasIndex("PizzasId");

                    b.ToTable("PaymentPizza");
                });

            modelBuilder.Entity("RollerPizza.Model.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(120)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<short>("Number")
                        .HasColumnType("smallint(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.HasKey("AddressId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("RollerPizza.Model.Client", b =>
                {
                    b.Property<string>("CPFId")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.HasKey("CPFId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("RollerPizza.Model.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<sbyte>("Quantity")
                        .HasColumnType("tinyint(100)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(38,2)");

                    b.HasKey("Id");

                    b.ToTable("Drink", (string)null);
                });

            modelBuilder.Entity("RollerPizza.Model.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("CPFId")
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusOrder")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<decimal?>("TotalPay")
                        .HasColumnType("decimal(38,2)");

                    b.HasKey("PaymentId");

                    b.HasIndex("CPFId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("RollerPizza.Model.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<sbyte>("Quantity")
                        .HasColumnType("tinyint(100)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(38,2)");

                    b.HasKey("Id");

                    b.ToTable("Pizza", (string)null);
                });

            modelBuilder.Entity("DrinkPayment", b =>
                {
                    b.HasOne("RollerPizza.Model.Drink", null)
                        .WithMany()
                        .HasForeignKey("DrinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollerPizza.Model.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaymentPizza", b =>
                {
                    b.HasOne("RollerPizza.Model.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RollerPizza.Model.Pizza", null)
                        .WithMany()
                        .HasForeignKey("PizzasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RollerPizza.Model.Address", b =>
                {
                    b.HasOne("RollerPizza.Model.Client", "Client")
                        .WithOne("Adress")
                        .HasForeignKey("RollerPizza.Model.Address", "ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RollerPizza.Model.Payment", b =>
                {
                    b.HasOne("RollerPizza.Model.Client", "Client")
                        .WithMany("PaymentItems")
                        .HasForeignKey("CPFId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RollerPizza.Model.Client", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("PaymentItems");
                });
#pragma warning restore 612, 618
        }
    }
}
